package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"flag"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event ebpf bpf_program.c

const (
	tracepoint    = "raw_syscalls:sys_enter"
	maxStackDepth = 20
)

type Allowlist struct {
	Dependencies map[string][]int `json:"dependencies"`
}

type symbolInfo struct {
	name  string
	start uint64
	end   uint64
}

var symbolCache []symbolInfo

func main() {

	log.SetFlags(log.Ltime)

	// Add a flag for the binary path
	binaryPath := flag.String("binary", "", "Path to the binary for syscall tracking")
	allowlistPath := flag.String("allowlist", "allowlist.json", "Path to the allowlist JSON file")
	flag.Parse()

	// Check if the binary path is provided
	if *binaryPath == "" {
		log.Fatal("Please provide a binary path using the -binary flag")
	}
	if *allowlistPath == "" {
		log.Fatal("Please provide a path to the allowlist JSON file using the -allowlist flag")
	}
	allowlist, err := loadAllowlist(*allowlistPath)
	if err != nil {
		log.Fatalf("loading allowlist: %v", err)
	}

	// Populate function symbols cache from the binary
	if err := populateSymbolCache(*binaryPath); err != nil {
		log.Fatalf("populating symbol cache: %v", err)
	}

	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled eBPF program and maps into the kernel.
	objs := ebpfObjects{}
	if err := loadEbpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a tracepoint and attach the pre-compiled program.
	tp, err := link.Tracepoint("raw_syscalls", "sys_enter", objs.TraceSyscall, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer tp.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event ebpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		// Process stack trace
		stackTrace, err := getStackTrace(objs.Stacktraces, event.StackId)
		callerPackage := getCallerPackage(stackTrace)
		resolvedStackTrace := resolveSymbols(stackTrace)
		firstGoFunc := getFirstGoPackageFunction(stackTrace)

		fmt.Printf("\n")
		log.Printf("Invoked syscall: %d\tpid: %d\tcomm: %s\n",
			event.Syscall, event.Pid, unix.ByteSliceToString(event.Comm[:]))
		log.Printf("Stack Trace:\n%s", resolvedStackTrace)
		log.Printf("Go caller function: %s", firstGoFunc)
		log.Printf("Go caller package: %s", callerPackage)

		if !isSyscallAllowed(callerPackage, int(event.Syscall), allowlist) {
			log.Printf("Unauthorized syscall %d from package %s", event.Syscall, callerPackage)
			// crash the application
		}
	}
}
