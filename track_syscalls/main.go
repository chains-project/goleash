package main

import (
	"bytes"
	"debug/elf"
	"encoding/binary"
	"errors"
	"flag"
	"fmt"
	"log"
	"os"
	"os/signal"
	"sort"
	"strings"
	"syscall"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event ebpf hello_ebpf.c

const (
	tracepoint    = "raw_syscalls:sys_enter"
	maxStackDepth = 20
)

type symbolInfo struct {
	name  string
	start uint64
	end   uint64
}

var symbolCache []symbolInfo

func populateSymbolCache(binaryPath string) error {
	f, err := elf.Open(binaryPath)
	if err != nil {
		return fmt.Errorf("opening binary: %w", err)
	}
	defer f.Close()

	symbols, err := f.Symbols()
	if err != nil {
		return fmt.Errorf("reading symbols: %w", err)
	}

	for _, sym := range symbols {
		if sym.Value != 0 && sym.Size != 0 {
			symbolCache = append(symbolCache, symbolInfo{
				name:  sym.Name,
				start: sym.Value,
				end:   sym.Value + sym.Size,
			})
		}
	}

	sort.Slice(symbolCache, func(i, j int) bool {
		return symbolCache[i].start < symbolCache[j].start
	})

	return nil
}

func resolveSymbols(stackTrace []uint64) string {
	var result strings.Builder
	for _, addr := range stackTrace {
		symbol := resolveSymbol(addr)
		result.WriteString(fmt.Sprintf("%s\n", symbol))
	}
	return result.String()
}

func resolveSymbol(addr uint64) string {
	idx := sort.Search(len(symbolCache), func(i int) bool {
		return symbolCache[i].start > addr
	}) - 1

	if idx >= 0 && addr >= symbolCache[idx].start && addr < symbolCache[idx].end {
		return symbolCache[idx].name
	}

	return fmt.Sprintf("0x%x", addr)
}

func getStackTrace(stackMap *ebpf.Map, stackID uint32) ([]uint64, error) {
	var stackTrace [maxStackDepth]uint64
	err := stackMap.Lookup(stackID, &stackTrace)
	if err != nil {
		return nil, err
	}

	var result []uint64
	for _, addr := range stackTrace {
		if addr == 0 {
			break
		}
		result = append(result, addr)
	}

	return result, nil
}

func main() {
	log.SetPrefix("hello_ebpf: ")
	log.SetFlags(log.Ltime)

	// Add a flag for the binary path
	binaryPath := flag.String("binary", "", "Path to the binary for syscall tracking")
	flag.Parse()

	// Check if the binary path is provided
	if *binaryPath == "" {
		log.Fatal("Please provide a binary path using the -binary flag")
	}

	// Populate symbol cache
	if err := populateSymbolCache(*binaryPath); err != nil {
		log.Fatalf("populating symbol cache: %v", err)
	}

	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := ebpfObjects{}
	if err := loadEbpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a tracepoint and attach the pre-compiled program.
	tp, err := link.Tracepoint("raw_syscalls", "sys_enter", objs.TraceSyscall, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer tp.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event ebpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		// Process stack trace
		stackTrace, err := getStackTrace(objs.Stacktraces, event.StackId)
		if err != nil {
			log.Printf("getting stack trace: %s", err)
		}

		resolvedStackTrace := resolveSymbols(stackTrace)

		log.Printf("syscall: %d\tpid: %d\tcomm: %s\nStack Trace:\n%s\n",
			event.Syscall, event.Pid, unix.ByteSliceToString(event.Comm[:]), resolvedStackTrace)

	}
}
